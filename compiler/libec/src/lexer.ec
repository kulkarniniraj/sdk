#line 2 "lexer.ec"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 164
#define YY_END_OF_BUFFER 165
static yyconst short int yy_accept[737] =
    {   0,
      104,  104,  165,  163,  162,  161,  160,  147,  163,    1,
      159,  153,  146,  163,  141,  142,  151,  150,  138,  149,
      145,  152,  107,  107,  139,  135,  154,  140,  155,  158,
      104,  104,  143,  144,  156,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  136,  157,  137,  148,  134,    0,  112,
        0,  120,  137,  129,  121,    0,    0,  118,  126,  116,
      127,  117,  128,    0,  110,    2,    3,  119,  111,  106,
        0,  107,    0,  107,  104,  144,  136,  143,  125,  131,
      133,  132,  124,    0,  104,    0,    0,    0,  122,  104,

      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,   11,  104,  104,  104,  104,
      104,  104,  104,  104,   19,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  123,  130,
      108,  113,    0,  110,  110,    0,  111,  106,    0,  109,
      105,  104,  115,  114,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,   84,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,   17,

       42,  104,  104,  104,  104,   20,  104,  104,  104,   48,
      104,  104,  104,  104,  104,  104,   41,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,    0,  110,    0,  110,
        0,  111,  109,  105,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,    4,  104,    6,    7,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
       13,   14,  104,  104,  104,   18,  104,  104,  104,  104,
      104,   22,  104,   49,  104,  104,  104,  104,  104,  104,

      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,   21,  104,  104,  104,   35,  104,  104,  104,    0,
      110,   85,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,    5,
       44,    8,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,   16,  104,  104,  104,   55,
       43,  104,  104,  104,  104,  104,   50,  104,   25,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,   33,
      104,  104,  104,   87,   39,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,

      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
       53,   47,  104,  104,   12,   15,  104,   52,   80,   64,
      104,  104,  104,   76,  104,   51,   24,   26,   28,   29,
      104,  104,   30,  104,   31,  104,  104,  104,  104,  104,
      104,  104,   83,  104,  104,   68,   74,  104,  104,  104,
       54,  104,  104,  104,  104,  104,  104,   62,  104,  104,
      104,  104,  104,  104,  104,  104,  101,  102,  100,   10,
      104,  104,  104,  104,   77,  104,  104,   72,  104,  104,
      104,  104,   32,  104,   46,  104,  104,  104,  104,  104,
      104,   63,  104,  104,  104,   86,  104,  104,   71,  104,

      104,  104,  104,  104,  104,    9,  104,  104,  104,  104,
      104,   40,   23,  104,   98,  104,  104,   34,   36,  104,
      104,  104,  104,  104,  104,  104,  104,   69,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,   66,   67,
      104,   99,  104,  104,   45,  104,   90,  104,  104,  104,
      104,   61,   73,   27,  104,   38,  104,   79,   96,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,    0,  104,  104,   70,  104,   82,  104,  104,   93,
      104,  104,  104,  104,  104,  104,  104,    0,    0,  104,
      104,   65,    0,  104,   75,   37,  104,  104,  104,  104,

      104,   89,  104,   88,   78,    0,  104,  104,  104,   81,
      104,  104,  104,  104,  103,  104,    0,    0,    0,    0,
        0,    0,    0,  104,  104,  104,  104,   91,  104,   97,
      104,    0,    0,    0,    0,   60,    0,    0,    0,    0,
        0,  104,  104,  104,  104,  104,  104,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      104,   57,  104,  104,  104,  104,    0,    0,    0,    0,
        0,    0,    0,   59,    0,    0,    0,    0,  104,   56,
      104,  104,   95,    0,    0,    0,    0,    0,    0,    0,
        0,  104,  104,   92,    0,    0,    0,  104,  104,  104,

      104,  104,  104,  104,   94,  104,  104,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   58,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   22,
       22,   23,   22,   24,   22,   22,   22,   25,   26,   27,
       28,   29,   30,    1,   31,   31,   31,   31,   32,   33,
       34,   34,   34,   34,   34,   35,   34,   34,   34,   34,
       34,   34,   34,   34,   36,   34,   34,   37,   34,   34,
       38,   39,   40,   41,   42,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   34,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[72] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        4,    5,    6,    7,    1,    1,    2,    1,    1,    1,
        8,    8,    8,    8,    4,    1,    1,    1,    1,    1,
        9,    9,    9,   10,   10,   10,   10,    1,    1,    1,
        1,   10,    9,    9,    9,    9,    9,    9,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    1,    1,    1,
        1
    } ;

static yyconst short int yy_base[763] =
    {   0,
        0,    0,  329, 2592, 2592, 2592, 2592,  290,   65, 2592,
     2592,   45,   64,  275, 2592, 2592,  278,   60, 2592,   61,
       59,   71,   86,  133,   68, 2592,   75,  258,   66, 2592,
       73,  104, 2592, 2592,  257,  102,   76,  101,  120,  139,
      136,  148,  147,  160,  109,  164,  117,  156,  187,  189,
      202,  199,  211, 2592,   68, 2592, 2592, 2592,  107, 2592,
      276, 2592, 2592, 2592, 2592,  179,  127, 2592, 2592, 2592,
     2592, 2592, 2592,  228,  241, 2592, 2592, 2592,  245,  281,
      207,  236,    0,    0,    0, 2592, 2592, 2592,  214, 2592,
     2592, 2592,  204,  192,  208,  181,  202,  158, 2592,  333,

      210,  235,  259,  215,  232,  271,  272,  234,  290,  296,
      297,  298,  299,  300,  301,  320,  326,  327,  338,  316,
      331,  346,  356,  358,  362,  379,  384,  386,  387,  389,
      390,  391,  395,  402,  396,  399,  411,  407,  415,  422,
      424,  430,  451,  454,  456,  457,  458,  459, 2592, 2592,
     2592, 2592,  469, 2592,  499,  478, 2592,  462,  504,  515,
      505,    0, 2592, 2592,    0,  484,  492,  518,  524,  493,
      531,  541,  540,  549,  551,  557,  559,  561,  567,  461,
      568,  569,  570,  572,  574,  578,  579,  585,  589,  594,
      605,  595,  610,  615,  616,  618,  621,  622,  633,  639,

      640,  641,  642,  649,  659,  661,  664,  666,  667,  669,
      668,  670,  671,  672,  677,  676,  692,  693,  694,  695,
      696,  701,  702,  705,  711,  718,  722,  723,  724,  726,
      729,  728,  730,  734,  733,  750,  741,  770,  750, 2592,
      774,  778, 2592,  752,    0,  796,  797,  798,  804,  806,
      805,  809,  808,  814,  816,  817,  824,  825,  826,  832,
      833,  837,  835,  852,  853,  856,  860,  861,  862,  863,
      878,  879,  882,  880,  883,  884,  885,  886,  887,  890,
      888,  891,  906,  907,  908,  909,  914,  916,  918,  924,
      925,  927,  937,  942,  945,  943,  947,  950,  953,  955,

      966,  968,  971,  970,  976,  974,  978,  981,  991,  997,
      993, 1000, 1001, 1009, 1018, 1019, 1020, 1021, 1022, 1027,
     1031, 1045, 1048, 1049, 1050, 1051, 1052, 1057, 1061, 1067,
     1072, 1073, 1077, 1083, 1085, 1088, 1089, 1094, 1090, 1098,
     1106, 1107, 1110, 1113, 1114, 1115, 1116, 1125, 1135, 1136,
     1132, 1138, 1140, 1142, 1148, 1144, 1147, 1153, 1160, 1163,
     1164, 1169, 1170, 1175, 1181, 1186, 1188, 1192, 1191, 1193,
     1194, 1199, 1203, 1210, 1204, 1211, 1212, 1221, 1227, 1230,
     1234, 1238, 1245, 1239, 1247, 1255, 1260, 1262, 1266, 1267,
     1273, 1268, 1275, 1278, 1277, 1283, 1284, 1288, 1293, 1296,

     1294, 1301, 1314, 1304, 1321, 1324, 1323, 1326, 1332, 1333,
     1336, 1342, 1348, 1352, 1353, 1357, 1360, 1361, 1363, 1364,
     1365, 1370, 1376, 1381, 1382, 1385, 1386, 1387, 1388, 1389,
     1391, 1393, 1408, 1409, 1411, 1413, 1414, 1415, 1417, 1416,
     1419, 1421, 1424, 1432, 1436, 1437, 1441, 1442, 1447, 1449,
     1457, 1464, 1466, 1467, 1468, 1469, 1472, 1470, 1473, 1477,
     1479, 1474, 1492, 1494, 1503, 1507, 1518, 1519, 1520, 1522,
     1523, 1526, 1527, 1530, 1531, 1535, 1546, 1548, 1551, 1552,
     1553, 1554, 1555, 1556, 1558, 1559, 1563, 1575, 1578, 1579,
     1582, 1583, 1584, 1586, 1599, 1605, 1607, 1610, 1611, 1620,

     1616, 1627, 1629, 1631, 1632, 1633, 1637, 1635, 1638, 1653,
     1644, 1655, 1657, 1659, 1660, 1661, 1663, 1665, 1670, 1681,
     1682, 1687, 1689, 1691, 1693, 1694, 1697, 1699, 1700, 1702,
     1706, 1719, 1721, 1712, 1725, 1727, 1715, 1731, 1734, 1740,
     1743, 1746, 1750, 1755, 1758, 1766, 1759, 1767, 1768, 1774,
     1771, 1775, 1778, 1783, 1786, 1787, 1790, 1791, 1793, 1794,
     1796, 1798, 1799, 1811, 1814, 1815, 1822, 1823, 1824, 1841,
     1830,  174, 1826, 1842, 1832, 1850, 1851, 1852, 1860, 1869,
     1870, 1871, 1875, 1876, 1877, 1878, 1879,  112,  171, 1887,
     1882, 2592,  164, 1900, 1880, 1888, 1898, 1906, 1907, 1909,

     1910, 1926, 1930, 1932, 1933, 1496, 1943, 1935, 1936, 1938,
     1951, 1953, 1958, 1956, 1960, 1961, 1975, 1970,  127, 1986,
     1991,  130,  111, 1984, 1986, 1990, 1991, 1995, 1996, 2002,
     2006, 2018, 2019, 2020, 2033, 2592, 2038, 2043, 2048, 2053,
     2059, 2015, 2019, 2058, 2060, 2064, 2066, 2073, 2079, 2081,
     2083, 2087, 2089, 2094, 2100, 2107, 2117,  105, 2122, 2124,
     2098, 2091, 2115, 2117, 2121, 2119, 2138, 2142, 2143, 2144,
     2148, 2149, 2163, 2592, 2170, 2165, 2176, 2181, 2177, 2139,
     2180, 2181, 2185, 2194, 2195, 2199, 2209, 2210, 2214, 2215,
     2228, 2192, 2196, 2214, 2235, 2239, 2241, 2223, 2236, 2225,

     2240, 2243, 2246, 2248, 2249, 2251, 2272,  239,   93, 2265,
     2286, 2291,   63, 2293, 2304, 2297, 2299, 2310, 2314, 2592,
     2320, 2315, 2325, 2330, 2331, 2335, 2336, 2341, 2346, 2351,
     2352, 2357, 2359, 2367, 2372, 2592, 2389, 2399, 2406, 2409,
     2410, 2413, 2415, 2419, 2428, 2437, 2446, 2455, 2464, 2473,
     2482, 2491, 2500, 2509, 2518, 2527, 2536, 2545, 2554, 2563,
     2572, 2581
    } ;

static yyconst short int yy_def[763] =
    {   0,
      736,    1,  736,  736,  736,  736,  736,  736,  737,  736,
      736,  736,  736,  738,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      739,  739,  736,  736,  736,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  736,  736,  736,  736,  736,  737,  736,
      737,  736,  736,  736,  736,  738,  738,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  740,   24,  741,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  739,  736,  737,  738,  736,  739,

      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      740,  742,  736,  736,  743,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,

      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  736,  736,  736,  736,
      736,  736,  736,  736,  742,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,

      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  736,
      736,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,

      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,

      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  744,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  736,  736,  739,
      739,  736,  744,  739,  739,  739,  739,  739,  739,  739,

      739,  739,  739,  739,  739,  745,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  745,  746,  736,  747,
      745,  736,  736,  739,  739,  739,  739,  739,  739,  739,
      739,  736,  746,  736,  748,  736,  747,  749,  747,  736,
      750,  739,  739,  739,  739,  739,  739,  736,  748,  748,
      736,  749,  736,  751,  736,  750,  752,  736,  753,  750,
      739,  739,  739,  739,  739,  739,  736,  751,  751,  736,
      752,  736,  754,  736,  753,  755,  753,  736,  739,  739,
      739,  739,  739,  736,  754,  754,  736,  755,  736,  756,
      736,  739,  739,  739,  736,  756,  756,  739,  739,  739,

      739,  739,  739,  739,  739,  739,  739,  736,  736,  757,
      757,  758,  736,  759,  757,  736,  758,  736,  760,  736,
      759,  761,  759,  736,  736,  760,  760,  736,  761,  736,
      762,  736,  736,  762,  762,    0,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736
    } ;

static yyconst short int yy_nxt[2664] =
    {   0,
        4,    5,    6,    7,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   24,   24,   25,   26,   27,   28,   29,   30,
       31,   31,   31,   31,   32,   31,   31,   33,    4,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   31,
       44,   31,   31,   45,   31,   46,   31,   47,   48,   49,
       50,   51,   52,   53,   31,   31,   31,   54,   55,   56,
       57,   60,   62,   63,   64,   69,  720,   74,   71,   75,
       75,   75,   75,   94,   87,   76,   94,   70,   72,   73,
       77,   65,   85,   92,   93,  149,   86,   96,   78,   88,

       96,   89,   90,   61,   79,  710,   80,   80,   80,   80,
       97,   94,   94,   60,   94,   98,  588,   81,  674,   94,
       82,   82,   83,  641,  589,   96,   96,   94,   96,  736,
       94,  104,   81,   96,  622,  105,  150,  106,   66,   82,
      636,   96,  623,  100,   96,   61,   94,   82,  101,   94,
       83,   79,  102,   84,   84,   84,   84,   94,   94,  107,
       96,  103,  108,   96,   81,  129,   94,   82,   82,  109,
       94,   96,   96,  110,   94,  132,  111,  592,  133,   81,
       96,  112,  113,  606,   96,  114,   82,  592,   96,  117,
      151,  118,  115,  123,   82,  116,   67,   94,  120,   94,

      119,  121,  134,  124,  122,  165,  130,  125,   60,   94,
      131,   96,   94,   96,  126,  127,   96,   67,   94,  128,
       94,   94,  159,   96,  159,   94,   96,  160,  160,  160,
      160,  164,   96,  135,   96,   96,  136,  137,  141,   96,
       61,  163,   94,  708,   94,   94,  152,  138,  139,  145,
      140,  709,  143,  147,  142,  146,   96,  144,   96,   96,
      148,   75,   75,   75,   75,  155,  155,  155,  155,   94,
       82,   82,  153,  154,  176,  154,  156,  157,  736,  157,
      179,   94,   94,   96,   99,   91,  180,  153,  154,   82,
      177,  156,  157,  183,  154,   96,   96,   82,  157,   79,

       94,   80,   80,   80,   80,   68,   94,   94,   94,   94,
       94,   94,   81,   67,   96,  158,  158,   58,  182,  178,
       96,   96,   96,   96,   96,   96,   94,   81,  736,  736,
       94,  181,  184,  736,  158,  736,   94,   94,  185,  736,
       96,   94,  158,   94,   96,  736,  188,  191,   94,  189,
       96,   96,  186,  192,  193,   96,   94,   96,  187,  190,
      736,  736,   96,  736,  736,  736,   94,  736,   94,  736,
       96,  736,   94,  736,  198,  166,  167,  168,  169,  170,
       96,  194,   96,  171,  736,  195,   96,  199,  196,   94,
      736,  172,  173,  174,   94,  175,   94,   94,  197,   94,

       94,   94,  736,   96,  200,   94,   94,  736,   96,   94,
       96,   96,   94,   96,   96,   96,  201,   94,  202,   96,
       96,   94,  736,   96,  736,   94,   96,  736,  204,  736,
      736,   96,   94,  736,   94,   96,  203,  205,  213,   96,
       94,  211,  208,  209,  206,  207,   96,  212,   96,  221,
      214,  736,  222,  210,   96,  218,  217,  215,  225,  219,
      736,   94,  216,  223,   94,  224,   94,   94,   94,   94,
      736,   94,  226,  736,  227,   96,  736,  220,   96,  736,
       96,   96,   96,   96,  237,   96,  237,  228,  736,  238,
      238,  238,  238,  241,   94,  241,  158,  158,  242,  242,

      242,  242,   94,   94,  230,  736,  229,  233,   96,  236,
      234,  736,  736,  231,  232,  158,   96,   96,  235,  155,
      155,  155,  155,  158,  160,  160,  160,  160,   94,  736,
      239,  240,  736,  240,   94,  160,  160,  160,  160,  244,
      244,   94,   96,  247,  248,  239,  240,  243,   96,  243,
       94,   94,  240,  249,  736,   96,  736,  253,  244,   94,
      736,   94,  243,  250,   96,   96,  244,   94,  243,   94,
      252,   94,  736,   96,  251,   96,  736,   94,   94,   94,
       94,   96,   94,   96,   94,   96,  254,  255,   94,   94,
      256,   96,   96,   96,   96,   94,   96,  736,   96,   94,

      257,  736,   96,   96,   94,   94,  262,  259,  263,   96,
      736,  265,  261,   96,  258,   94,  266,  260,   96,   96,
       94,  271,  736,  736,  264,   94,   94,  736,   94,   96,
      267,   94,   94,  268,   96,  272,  274,  269,  270,   96,
       96,  277,   96,   94,  273,   96,   96,  275,  736,   94,
       94,   94,   94,  736,  736,  276,  278,   96,  280,   94,
      279,  736,  281,   96,   96,   96,   96,  283,  284,   94,
      736,   94,  282,   96,   94,  285,   94,   94,   94,   94,
       94,   94,   94,   96,  290,   96,   94,   94,   96,  294,
       96,   96,   96,   96,   96,   96,   96,  286,  287,  736,

       96,   96,   94,   94,   94,   94,   94,  288,  736,  289,
      291,   94,   94,  293,  292,   94,   96,   96,   96,   96,
       96,   94,  298,  299,  297,   96,   96,  296,   94,   96,
      295,  736,   94,   94,   94,   96,   94,  300,   94,   94,
       94,  303,   96,   94,   94,  305,   96,   96,   96,  302,
       96,  301,   96,   96,   96,  308,  304,   96,   96,  306,
       94,  238,  238,  238,  238,  320,  307,  320,  736,  311,
      321,  321,  321,  321,   96,  316,  317,  318,  309,  314,
      736,  310,  313,  736,  312,  736,  244,  244,  315,  736,
      238,  238,  238,  238,  242,  242,  242,  242,  242,  242,

      242,  242,  154,  319,  154,  244,   94,   94,   94,  736,
      157,  736,  157,  244,   94,   94,   94,  154,   94,   94,
       96,   96,   96,  154,   94,  157,   94,   94,   96,   96,
       96,  157,   96,   96,   94,   94,   94,  736,   96,  736,
       96,   96,   94,   94,  736,   94,  736,   94,   96,   96,
       96,  322,  325,  327,  324,  736,   96,   96,  323,   96,
      326,   96,   94,   94,  736,  332,   94,  329,  328,  333,
       94,   94,   94,   94,  330,  331,   96,   96,  336,  335,
       96,  338,  334,  337,   96,   96,   96,   96,   94,   94,
       94,  339,   94,   94,   94,   94,   94,   94,   94,  736,

       94,   94,   96,   96,   96,  340,   96,   96,   96,   96,
       96,   96,   96,  343,   96,   96,   94,   94,   94,   94,
      341,  344,  342,  347,   94,  345,   94,  346,   94,  736,
       96,   96,   96,   96,   94,   94,  736,   94,   96,  349,
       96,  352,   96,  353,  348,  350,  360,   94,   96,   96,
      351,   96,   94,   94,  736,   94,  736,   94,  736,  736,
       94,   96,  358,   94,  354,   94,   96,   96,  356,   96,
      355,   96,  357,  359,   96,  736,   94,   96,   94,   96,
       94,   94,  736,  736,   94,  361,   94,  363,   94,  364,
       96,   94,   96,  736,   96,   96,  362,  365,   96,  736,

       96,   94,   96,   94,  736,   96,  736,   94,  736,  366,
       94,   94,  736,  368,  370,   96,  367,   96,  373,   94,
      372,   96,  375,  736,   96,   96,  369,  371,   94,   94,
       94,   94,   94,   96,  376,  377,  736,  374,  379,  736,
      736,  378,   96,   96,   96,   96,   96,  321,  321,  321,
      321,  321,  321,  321,  321,   94,  380,  381,   94,   94,
       94,   94,   94,  240,  736,  240,  736,   94,  385,   96,
      384,   94,   96,   96,   96,   96,   96,   94,  240,  382,
      383,   96,   94,   94,  240,   96,  386,   94,  736,  736,
      394,   96,  736,   94,  389,   94,   96,   96,   94,   94,

       94,   96,  388,  392,   94,  391,  387,   96,   94,   96,
      390,  393,   96,   96,   96,  736,   94,   94,   96,  736,
       94,  397,   96,   94,   94,   94,   94,  399,  396,  398,
       96,   96,  395,  403,   96,   94,  402,   96,   96,   96,
       96,  736,   94,  400,  401,   94,   94,  404,   94,   96,
       94,  736,   94,  736,   94,  406,   96,   94,   94,   96,
       96,  408,   96,   94,   96,  405,   96,  407,   96,  409,
       94,   96,   96,   94,   94,  736,  736,   96,  410,   94,
       94,  411,  412,  736,   96,   94,  415,   96,   96,  413,
      417,   94,  736,   96,   96,  414,   94,  416,   94,   96,

      419,   94,   94,   94,   94,   96,  420,  418,  426,   94,
       96,  736,   96,   94,   94,   96,   96,   96,   96,  736,
       94,   94,   94,   96,  736,  424,  421,   96,   96,  736,
      422,   94,  736,  423,   96,   96,   96,   94,  428,  736,
       94,  429,  736,  430,   94,   96,  425,  427,   94,   94,
      736,   96,  432,  434,   96,   94,  431,   94,   96,  736,
      736,  435,   96,   96,  433,   94,  736,  736,  437,   96,
       94,   96,   94,  438,  436,  736,   94,   94,   94,   96,
      440,  442,  736,   94,   96,   94,   96,   94,   94,  439,
       96,   96,   96,   94,   94,  441,  443,   96,   94,   96,

      451,   96,   96,   94,   94,  736,   94,   96,   96,  736,
      444,   94,   96,  736,   94,  736,  736,   96,   96,  446,
       96,  736,  445,  449,   94,   96,  454,  447,   96,  453,
      450,   94,  448,   94,   94,  452,   94,  736,   96,  736,
      458,  736,   94,   94,  455,   96,   94,   96,   96,  461,
       96,  462,   94,  456,  459,  457,   96,   96,   94,  463,
       96,  464,   94,   94,  736,  460,   96,   94,  467,  736,
       94,   94,   96,   94,   94,   94,   96,   96,  469,  736,
       94,   96,  465,  466,   96,   96,   94,   96,   96,   96,
      468,   94,   94,  470,   96,   94,   94,   94,   94,   94,

       96,   94,  736,   94,  471,   96,   96,  474,  472,   96,
       96,   96,   96,   96,  736,   96,  475,   96,   94,   94,
      473,   94,  736,   94,   94,   94,   94,   94,  477,   94,
      736,   94,   96,   96,   94,   96,  476,   96,   96,   96,
       96,   96,   94,   96,  478,   96,   94,   94,   96,  736,
      736,   94,   94,  479,  736,  481,   96,   94,  736,   94,
       96,   96,  483,  484,  487,   96,   96,   94,  480,  485,
      482,   96,  486,   96,   94,  488,   94,   94,   94,   94,
       94,   96,   94,   94,   94,  736,  489,   94,   96,   94,
       96,   96,   96,   96,   96,  492,   96,   96,   96,  490,

      617,   96,   94,   96,   94,  736,  491,  736,  618,  619,
      736,  494,  620,   94,  493,  496,   96,   94,   96,  497,
      495,  501,  498,  500,  503,  502,  499,   96,   94,   94,
       94,   96,   94,   94,  736,  736,   94,   94,  736,  736,
       94,   94,   96,   96,   96,   94,   96,   96,  504,  506,
       96,   96,  505,  507,   96,   96,   94,  736,   94,   96,
      736,   94,   94,   94,   94,   94,   94,  736,   94,   94,
       96,  510,   96,   94,  511,   96,   96,   96,   96,   96,
       96,  508,   96,   96,  509,   94,  736,   96,   94,   94,
      736,  736,   94,   94,   94,  514,   94,  517,  736,   96,

      512,  518,   96,   96,  513,  519,   96,   96,   96,   94,
       96,  515,  516,  736,  736,   94,  520,   94,  736,  736,
       94,   94,  736,   96,  525,  523,   94,  527,  526,   96,
       94,   96,  524,  522,   96,   96,  521,   94,  736,   94,
       96,   94,   94,   94,   96,   94,  736,   94,   94,  736,
      736,   96,  528,   96,   94,   96,   96,   96,  736,   96,
      529,   96,   96,   94,  531,   94,  530,   94,   96,   94,
       94,   94,  536,   94,  533,   94,  532,   96,  538,   96,
       94,   96,  736,   96,   96,   96,  534,   96,  537,   96,
      542,   94,   94,  535,   96,  539,  543,   94,  540,   94,

      736,   94,  541,   94,   94,   96,   96,   94,  544,   94,
       94,   96,   94,   96,  546,   96,   94,   96,   96,  736,
      545,   96,   94,   96,   96,   94,   96,  547,  549,   94,
       96,   94,  736,  550,  552,   94,   96,   94,  554,   96,
      555,   94,  548,   96,   94,   96,  556,  551,  736,   96,
       94,   96,  736,   94,  553,   96,   94,  557,   96,  736,
       94,  559,  561,  560,   96,   94,  558,   96,   94,   94,
       96,  562,  564,  563,   96,  736,   94,   94,   94,   96,
      736,   94,   96,   96,   94,   94,  572,  565,   94,  566,
       96,   96,   96,   94,  567,   96,   94,   94,   96,   96,

       94,   94,   96,   94,   94,  568,   94,   96,   94,   94,
       96,   96,  569,  570,   96,   96,  736,   96,   96,  574,
       96,   94,   96,   96,   94,   94,  573,  575,  576,  736,
      571,  577,   94,   94,   94,   96,   94,  736,   96,   96,
       94,  736,   94,  580,  579,  588,   96,   96,   96,  736,
       96,   94,   94,  589,   96,  578,   96,  582,  736,  736,
       94,   94,   94,  581,  585,   96,   96,  594,  587,  736,
       94,  583,  591,  584,   96,   96,   96,  736,  586,   94,
       94,   94,  590,  595,   96,   94,   94,   94,   94,   94,
       94,  596,   94,   96,   96,   96,  736,   94,   94,   96,

       96,   96,   96,   96,   96,  597,   96,  736,   94,  736,
       94,   96,   96,  736,  736,  598,   94,   94,  736,   94,
       94,  601,   96,  609,   96,  736,  604,  599,  607,  600,
       96,   96,  608,   96,   96,  602,   94,  603,  736,  605,
       94,  610,   94,   94,  736,   94,   94,  622,   94,  613,
       96,  736,  612,   94,   96,  623,   96,   96,  611,   96,
       96,   94,   96,   94,  736,  615,   94,   96,   94,  614,
       94,   94,  736,  736,  632,   96,  616,   96,  625,  617,
       96,  624,   96,  634,   96,   96,  635,  618,  619,  626,
      637,  620,  627,  736,   94,  640,   94,  736,  638,  619,

       94,   94,  620,  618,  619,   94,   94,  620,   96,  631,
       96,  628,   94,  629,   96,   96,   94,  736,  736,   96,
       96,  630,  632,  632,  648,   94,   96,  736,  736,   94,
       96,  634,  634,  619,  635,  635,  620,  649,  736,   96,
      644,  642,  637,   96,  643,  736,  634,  651,  645,  635,
      638,  619,  655,  736,  620,  646,  653,  640,  736,  654,
      638,  619,  647,  656,  620,  618,  619,  662,   94,  620,
       94,  657,  658,  661,   94,  659,   94,  648,  736,  736,
      736,  736,   96,  649,   96,  632,  619,  651,   96,  620,
       96,  651,  634,  667,  634,  635,  653,  635,  668,  654,

      653,   94,  619,  654,  655,  620,  736,  653,   94,  736,
      654,  656,  638,  619,  665,   96,  620,  663,  664,  657,
      658,  670,   96,  659,  666,   94,  675,   94,  678,   94,
      672,   94,  736,  673,  676,  658,  657,  658,  659,   96,
      659,   96,  667,   96,  679,   96,  668,  651,  670,   94,
      736,  619,  670,  684,  620,  653,  653,  672,  654,  654,
      673,  672,  658,   96,  673,  659,  736,  685,  736,  687,
      736,  736,  736,  681,  675,  680,  672,  682,  689,  673,
      691,  690,  676,  658,  683,  678,  659,   94,  676,  658,
       94,   94,  659,  657,  658,   94,  736,  659,  684,  685,

      736,   96,   94,  670,   96,   96,   94,  658,  672,   96,
      659,  673,  672,  687,  687,  673,   96,  736,  695,  696,
       96,  692,  689,  689,   94,  690,  690,  658,  689,  736,
      659,  690,  691,   94,  698,   94,  694,  693,   96,  695,
      676,  658,  699,  696,  659,  687,   94,   96,  658,   96,
       94,  659,  689,   94,  689,  690,   94,  690,   94,   94,
       96,   94,  736,  736,   96,  736,  736,   96,  736,  711,
       96,  702,   96,   96,  736,   96,  708,  712,  713,  736,
      736,  714,   94,  700,  709,  736,  736,  736,  704,  706,
      711,  736,  707,  736,  701,  716,   96,  721,  712,  713,

      703,  716,  714,  716,  718,  722,  713,  719,  724,  714,
      718,  705,  718,  719,  725,  719,  712,  713,  726,  728,
      714,  736,  736,  713,  721,  736,  714,  718,  730,  732,
      719,  731,  722,  713,  724,  725,  714,  722,  713,  726,
      716,  714,  712,  713,  713,  728,  714,  714,  718,  718,
      728,  719,  719,  736,  730,  733,  734,  731,  736,  730,
      736,  732,  731,  733,  713,  730,  736,  714,  731,  722,
      713,  734,  713,  714,  736,  714,  728,  736,  736,  736,
      730,  736,  736,  731,  736,  730,  736,  736,  731,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   66,

       66,   66,   66,  736,   66,   66,   66,   66,   66,   95,
      736,  736,  736,   95,   95,   95,  161,  161,  162,  162,
      245,  245,  245,  246,  246,  593,  593,  593,  593,  621,
      736,  736,  736,  621,  621,  621,  621,  621,  633,  633,
      736,  736,  736,  633,  633,  633,  633,  639,  736,  736,
      736,  639,  639,  639,  639,  639,  650,  650,  736,  736,
      736,  650,  650,  650,  650,  652,  652,  736,  736,  736,
      652,  652,  652,  652,  660,  736,  736,  736,  660,  660,
      660,  660,  660,  669,  669,  736,  736,  736,  669,  669,
      669,  669,  671,  671,  736,  736,  736,  671,  671,  671,

      671,  677,  736,  736,  736,  677,  677,  677,  677,  677,
      686,  686,  736,  736,  736,  686,  686,  686,  686,  688,
      688,  736,  736,  736,  688,  688,  688,  688,  697,  697,
      736,  736,  736,  697,  697,  697,  697,  715,  736,  736,
      736,  715,  715,  715,  715,  715,  717,  717,  736,  736,
      736,  717,  717,  717,  717,  723,  736,  736,  736,  723,
      723,  723,  723,  723,  727,  727,  736,  736,  736,  727,
      727,  727,  727,  729,  729,  736,  736,  736,  729,  729,
      729,  729,  735,  735,  736,  736,  736,  735,  735,  735,
      735,    3,  736,  736,  736,  736,  736,  736,  736,  736,

      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736
    } ;

static yyconst short int yy_chk[2664] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    9,   12,   12,   13,   18,  713,   21,   20,   21,
       21,   21,   21,   31,   27,   22,   37,   18,   20,   20,
       22,   13,   25,   29,   29,   55,   25,   31,   22,   27,

       37,   27,   27,    9,   23,  709,   23,   23,   23,   23,
       32,   38,   36,   59,   32,   32,  588,   23,  658,   45,
       23,   23,   23,  623,  588,   38,   36,   47,   32,   67,
       39,   37,   23,   45,  622,   37,   55,   37,   67,   23,
      619,   47,  622,   36,   39,   59,   41,   23,   36,   40,
       23,   24,   36,   24,   24,   24,   24,   43,   42,   38,
       41,   36,   39,   40,   24,   45,   48,   24,   24,   39,
       44,   43,   42,   39,   46,   47,   39,  593,   47,   24,
       48,   40,   40,  589,   44,   40,   24,  572,   46,   41,
       66,   41,   40,   43,   24,   40,   98,   49,   42,   50,

       41,   42,   48,   43,   42,   96,   46,   44,   97,   52,
       46,   49,   51,   50,   44,   44,   94,   66,   95,   44,
      101,   53,   81,   52,   81,  104,   51,   81,   81,   81,
       81,   93,   95,   49,  101,   53,   49,   49,   50,  104,
       97,   89,  105,  708,  108,  102,   74,   49,   49,   52,
       49,  708,   51,   53,   50,   52,  105,   51,  108,  102,
       53,   75,   75,   75,   75,   79,   79,   79,   79,  103,
       82,   82,   75,   75,  101,   75,   79,   79,   61,   79,
      104,  106,  107,  103,   35,   28,  105,   75,   75,   82,
      102,   79,   79,  108,   75,  106,  107,   82,   79,   80,

      109,   80,   80,   80,   80,   17,  110,  111,  112,  113,
      114,  115,   80,   14,  109,   80,   80,    8,  107,  103,
      110,  111,  112,  113,  114,  115,  120,   80,    3,    0,
      116,  106,  109,    0,   80,    0,  117,  118,  110,    0,
      120,  121,   80,  100,  116,    0,  113,  114,  119,  113,
      117,  118,  111,  114,  115,  121,  122,  100,  112,  113,
        0,    0,  119,    0,    0,    0,  123,    0,  124,    0,
      122,    0,  125,    0,  120,  100,  100,  100,  100,  100,
      123,  116,  124,  100,    0,  117,  125,  121,  118,  126,
        0,  100,  100,  100,  127,  100,  128,  129,  119,  130,

      131,  132,    0,  126,  122,  133,  135,    0,  127,  136,
      128,  129,  134,  130,  131,  132,  123,  138,  124,  133,
      135,  137,    0,  136,    0,  139,  134,    0,  127,    0,
        0,  138,  140,    0,  141,  137,  126,  127,  133,  139,
      142,  132,  129,  130,  127,  128,  140,  132,  141,  138,
      134,    0,  138,  131,  142,  136,  135,  134,  139,  137,
        0,  143,  134,  138,  144,  138,  145,  146,  147,  148,
        0,  180,  140,    0,  141,  143,    0,  137,  144,    0,
      145,  146,  147,  148,  153,  180,  153,  142,    0,  153,
      153,  153,  153,  156,  166,  156,  158,  158,  156,  156,

      156,  156,  167,  170,  144,    0,  143,  146,  166,  148,
      146,    0,    0,  144,  145,  158,  167,  170,  147,  155,
      155,  155,  155,  158,  159,  159,  159,  159,  168,    0,
      155,  155,    0,  155,  169,  160,  160,  160,  160,  161,
      161,  171,  168,  166,  166,  155,  155,  160,  169,  160,
      173,  172,  155,  167,    0,  171,    0,  170,  161,  174,
        0,  175,  160,  168,  173,  172,  161,  176,  160,  177,
      169,  178,    0,  174,  168,  175,    0,  179,  181,  182,
      183,  176,  184,  177,  185,  178,  171,  172,  186,  187,
      173,  179,  181,  182,  183,  188,  184,    0,  185,  189,

      173,    0,  186,  187,  190,  192,  178,  175,  179,  188,
        0,  182,  177,  189,  174,  191,  183,  176,  190,  192,
      193,  187,    0,    0,  181,  194,  195,    0,  196,  191,
      184,  197,  198,  185,  193,  188,  190,  186,  186,  194,
      195,  192,  196,  199,  189,  197,  198,  191,    0,  200,
      201,  202,  203,    0,    0,  191,  193,  199,  194,  204,
      193,    0,  195,  200,  201,  202,  203,  197,  198,  205,
        0,  206,  196,  204,  207,  199,  208,  209,  211,  210,
      212,  213,  214,  205,  206,  206,  216,  215,  207,  210,
      208,  209,  211,  210,  212,  213,  214,  202,  203,    0,

      216,  215,  217,  218,  219,  220,  221,  204,    0,  205,
      207,  222,  223,  209,  208,  224,  217,  218,  219,  220,
      221,  225,  214,  215,  213,  222,  223,  212,  226,  224,
      211,    0,  227,  228,  229,  225,  230,  216,  232,  231,
      233,  220,  226,  235,  234,  222,  227,  228,  229,  219,
      230,  218,  232,  231,  233,  225,  221,  235,  234,  223,
      236,  237,  237,  237,  237,  239,  224,  239,    0,  228,
      239,  239,  239,  239,  236,  233,  234,  235,  226,  231,
        0,  227,  230,    0,  229,    0,  244,  244,  232,    0,
      238,  238,  238,  238,  241,  241,  241,  241,  242,  242,

      242,  242,  238,  236,  238,  244,  246,  247,  248,    0,
      242,    0,  242,  244,  249,  251,  250,  238,  253,  252,
      246,  247,  248,  238,  254,  242,  255,  256,  249,  251,
      250,  242,  253,  252,  257,  258,  259,    0,  254,    0,
      255,  256,  260,  261,    0,  263,    0,  262,  257,  258,
      259,  247,  250,  252,  249,    0,  260,  261,  248,  263,
      251,  262,  264,  265,    0,  256,  266,  254,  253,  257,
      267,  268,  269,  270,  254,  255,  264,  265,  260,  259,
      266,  262,  258,  261,  267,  268,  269,  270,  271,  272,
      274,  263,  273,  275,  276,  277,  278,  279,  281,    0,

      280,  282,  271,  272,  274,  265,  273,  275,  276,  277,
      278,  279,  281,  270,  280,  282,  283,  284,  285,  286,
      268,  271,  269,  274,  287,  272,  288,  273,  289,    0,
      283,  284,  285,  286,  290,  291,    0,  292,  287,  276,
      288,  279,  289,  280,  275,  277,  290,  293,  290,  291,
      278,  292,  294,  296,    0,  295,    0,  297,    0,    0,
      298,  293,  288,  299,  283,  300,  294,  296,  285,  295,
      284,  297,  287,  289,  298,    0,  301,  299,  302,  300,
      304,  303,    0,    0,  306,  291,  305,  295,  307,  296,
      301,  308,  302,    0,  304,  303,  293,  297,  306,    0,

      305,  309,  307,  311,    0,  308,    0,  310,    0,  298,
      312,  313,    0,  300,  302,  309,  299,  311,  305,  314,
      304,  310,  307,    0,  312,  313,  301,  303,  315,  316,
      317,  318,  319,  314,  308,  309,    0,  306,  311,    0,
        0,  310,  315,  316,  317,  318,  319,  320,  320,  320,
      320,  321,  321,  321,  321,  322,  313,  314,  323,  324,
      325,  326,  327,  321,    0,  321,    0,  328,  319,  322,
      318,  329,  323,  324,  325,  326,  327,  330,  321,  315,
      317,  328,  331,  332,  321,  329,  322,  333,    0,    0,
      330,  330,    0,  334,  325,  335,  331,  332,  336,  337,

      339,  333,  324,  328,  338,  327,  323,  334,  340,  335,
      326,  329,  336,  337,  339,    0,  341,  342,  338,    0,
      343,  333,  340,  344,  345,  346,  347,  335,  332,  334,
      341,  342,  331,  339,  343,  348,  338,  344,  345,  346,
      347,    0,  351,  336,  337,  349,  350,  341,  352,  348,
      353,    0,  354,    0,  356,  344,  351,  357,  355,  349,
      350,  346,  352,  358,  353,  343,  354,  345,  356,  347,
      359,  357,  355,  360,  361,    0,    0,  358,  348,  362,
      363,  349,  350,    0,  359,  364,  353,  360,  361,  351,
      355,  365,    0,  362,  363,  352,  366,  354,  367,  364,

      358,  369,  368,  370,  371,  365,  359,  357,  367,  372,
      366,    0,  367,  373,  375,  369,  368,  370,  371,    0,
      374,  376,  377,  372,    0,  365,  362,  373,  375,    0,
      363,  378,    0,  364,  374,  376,  377,  379,  370,    0,
      380,  371,    0,  372,  381,  378,  366,  368,  382,  384,
        0,  379,  374,  376,  380,  383,  373,  385,  381,    0,
        0,  377,  382,  384,  375,  386,    0,    0,  379,  383,
      387,  385,  388,  379,  378,    0,  389,  390,  392,  386,
      382,  384,    0,  391,  387,  393,  388,  395,  394,  381,
      389,  390,  392,  396,  397,  383,  386,  391,  398,  393,

      394,  395,  394,  399,  401,    0,  400,  396,  397,    0,
      387,  402,  398,    0,  404,    0,    0,  399,  401,  389,
      400,    0,  388,  392,  403,  402,  397,  390,  404,  396,
      393,  405,  391,  407,  406,  395,  408,    0,  403,    0,
      401,    0,  409,  410,  398,  405,  411,  407,  406,  404,
      408,  404,  412,  399,  402,  400,  409,  410,  413,  404,
      411,  404,  414,  415,    0,  403,  412,  416,  407,    0,
      417,  418,  413,  419,  420,  421,  414,  415,  409,    0,
      422,  416,  405,  406,  417,  418,  423,  419,  420,  421,
      408,  424,  425,  410,  422,  426,  427,  428,  429,  430,

      423,  431,    0,  432,  413,  424,  425,  421,  414,  426,
      427,  428,  429,  430,    0,  431,  422,  432,  433,  434,
      417,  435,    0,  436,  437,  438,  440,  439,  425,  441,
        0,  442,  433,  434,  443,  435,  423,  436,  437,  438,
      440,  439,  444,  441,  431,  442,  445,  446,  443,    0,
        0,  447,  448,  432,    0,  436,  444,  449,    0,  450,
      445,  446,  438,  439,  442,  447,  448,  451,  434,  440,
      437,  449,  441,  450,  452,  444,  453,  454,  455,  456,
      458,  451,  457,  459,  462,    0,  445,  460,  452,  461,
      453,  454,  455,  456,  458,  450,  457,  459,  462,  448,

      606,  460,  463,  461,  464,    0,  449,    0,  606,  606,
        0,  453,  606,  465,  452,  455,  463,  466,  464,  456,
      454,  461,  457,  460,  462,  461,  459,  465,  467,  468,
      469,  466,  470,  471,    0,    0,  472,  473,    0,    0,
      474,  475,  467,  468,  469,  476,  470,  471,  463,  465,
      472,  473,  464,  466,  474,  475,  477,    0,  478,  476,
        0,  479,  480,  481,  482,  483,  484,    0,  485,  486,
      477,  473,  478,  487,  474,  479,  480,  481,  482,  483,
      484,  471,  485,  486,  472,  488,    0,  487,  489,  490,
        0,    0,  491,  492,  493,  479,  494,  482,    0,  488,

      476,  484,  489,  490,  477,  486,  491,  492,  493,  495,
      494,  480,  481,    0,    0,  496,  487,  497,    0,    0,
      498,  499,    0,  495,  492,  490,  501,  494,  493,  496,
      500,  497,  491,  489,  498,  499,  488,  502,    0,  503,
      501,  504,  505,  506,  500,  508,    0,  507,  509,    0,
        0,  502,  495,  503,  511,  504,  505,  506,    0,  508,
      497,  507,  509,  510,  500,  512,  498,  513,  511,  514,
      515,  516,  504,  517,  502,  518,  501,  510,  507,  512,
      519,  513,    0,  514,  515,  516,  502,  517,  505,  518,
      511,  520,  521,  503,  519,  508,  512,  522,  509,  523,

        0,  524,  510,  525,  526,  520,  521,  527,  514,  528,
      529,  522,  530,  523,  517,  524,  531,  525,  526,    0,
      516,  527,  534,  528,  529,  537,  530,  520,  522,  532,
      531,  533,    0,  523,  525,  535,  534,  536,  527,  537,
      528,  538,  521,  532,  539,  533,  529,  524,    0,  535,
      540,  536,    0,  541,  526,  538,  542,  530,  539,    0,
      543,  532,  534,  533,  540,  544,  531,  541,  545,  547,
      542,  535,  537,  536,  543,    0,  546,  548,  549,  544,
        0,  551,  545,  547,  550,  552,  550,  538,  553,  541,
      546,  548,  549,  554,  543,  551,  555,  556,  550,  552,

      557,  558,  553,  559,  560,  544,  561,  554,  562,  563,
      555,  556,  546,  548,  557,  558,    0,  559,  560,  553,
      561,  564,  562,  563,  565,  566,  551,  555,  556,    0,
      549,  557,  567,  568,  569,  564,  573,    0,  565,  566,
      571,    0,  575,  562,  561,  570,  567,  568,  569,    0,
      573,  570,  574,  570,  571,  560,  575,  564,    0,    0,
      576,  577,  578,  563,  567,  570,  574,  573,  569,    0,
      579,  565,  571,  566,  576,  577,  578,    0,  568,  580,
      581,  582,  570,  574,  579,  583,  584,  585,  586,  587,
      595,  576,  591,  580,  581,  582,    0,  590,  596,  583,

      584,  585,  586,  587,  595,  578,  591,    0,  597,    0,
      594,  590,  596,    0,    0,  579,  598,  599,    0,  600,
      601,  583,  597,  591,  594,    0,  586,  581,  590,  582,
      598,  599,  590,  600,  601,  584,  602,  585,    0,  587,
      603,  594,  604,  605,    0,  608,  609,  607,  610,  599,
      602,    0,  598,  607,  603,  607,  604,  605,  597,  608,
      609,  611,  610,  612,    0,  601,  614,  607,  613,  600,
      615,  616,    0,    0,  618,  611,  603,  612,  609,  617,
      614,  608,  613,  618,  615,  616,  618,  617,  617,  609,
      620,  617,  611,    0,  624,  621,  625,    0,  620,  620,

      626,  627,  620,  621,  621,  628,  629,  621,  624,  616,
      625,  612,  630,  613,  626,  627,  631,    0,    0,  628,
      629,  614,  632,  633,  634,  642,  630,    0,    0,  643,
      631,  632,  633,  634,  632,  633,  634,  635,    0,  642,
      626,  624,  637,  643,  625,    0,  635,  638,  627,  635,
      637,  637,  639,    0,  637,  629,  638,  640,    0,  638,
      639,  639,  631,  641,  639,  640,  640,  643,  644,  640,
      645,  641,  641,  642,  646,  641,  647,  648,    0,    0,
        0,    0,  644,  649,  645,  650,  648,  651,  646,  648,
      647,  652,  649,  653,  650,  649,  651,  650,  654,  651,

      652,  662,  653,  652,  655,  653,    0,  654,  661,    0,
      654,  656,  655,  655,  646,  662,  655,  644,  645,  656,
      656,  657,  661,  656,  647,  663,  659,  664,  660,  666,
      657,  665,    0,  657,  659,  659,  660,  660,  659,  663,
      660,  664,  667,  666,  661,  665,  668,  669,  670,  680,
        0,  667,  671,  672,  667,  668,  669,  670,  668,  669,
      670,  671,  672,  680,  671,  672,    0,  673,    0,  676,
        0,    0,    0,  664,  675,  663,  673,  665,  676,  673,
      677,  676,  675,  675,  666,  678,  675,  679,  677,  677,
      681,  682,  677,  678,  678,  683,    0,  678,  684,  685,

        0,  679,  692,  686,  681,  682,  693,  684,  685,  683,
      684,  685,  686,  687,  688,  686,  692,    0,  689,  690,
      693,  679,  687,  688,  694,  687,  688,  689,  690,    0,
      689,  690,  691,  698,  692,  700,  682,  681,  694,  695,
      691,  691,  693,  696,  691,  697,  699,  698,  695,  700,
      701,  695,  696,  702,  697,  696,  703,  697,  704,  705,
      699,  706,    0,    0,  701,    0,    0,  702,    0,  710,
      703,  700,  704,  705,    0,  706,  707,  710,  710,    0,
        0,  710,  707,  698,  707,    0,    0,    0,  702,  704,
      711,    0,  706,    0,  699,  712,  707,  714,  711,  711,

      701,  716,  711,  717,  712,  714,  714,  712,  715,  714,
      716,  703,  717,  716,  718,  717,  715,  715,  719,  722,
      715,    0,    0,  718,  721,    0,  718,  719,  722,  723,
      719,  722,  721,  721,  724,  725,  721,  723,  723,  726,
      727,  723,  724,  724,  725,  728,  724,  725,  726,  727,
      729,  726,  727,    0,  728,  730,  731,  728,    0,  729,
        0,  732,  729,  733,  730,  731,    0,  730,  731,  732,
      732,  734,  733,  732,    0,  733,  735,    0,    0,    0,
      734,    0,    0,  734,    0,  735,    0,    0,  735,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  738,

      738,  738,  738,    0,  738,  738,  738,  738,  738,  739,
        0,    0,    0,  739,  739,  739,  740,  740,  741,  741,
      742,  742,  742,  743,  743,  744,  744,  744,  744,  745,
        0,    0,    0,  745,  745,  745,  745,  745,  746,  746,
        0,    0,    0,  746,  746,  746,  746,  747,    0,    0,
        0,  747,  747,  747,  747,  747,  748,  748,    0,    0,
        0,  748,  748,  748,  748,  749,  749,    0,    0,    0,
      749,  749,  749,  749,  750,    0,    0,    0,  750,  750,
      750,  750,  750,  751,  751,    0,    0,    0,  751,  751,
      751,  751,  752,  752,    0,    0,    0,  752,  752,  752,

      752,  753,    0,    0,    0,  753,  753,  753,  753,  753,
      754,  754,    0,    0,    0,  754,  754,  754,  754,  755,
      755,    0,    0,    0,  755,  755,  755,  755,  756,  756,
        0,    0,    0,  756,  756,  756,  756,  757,    0,    0,
        0,  757,  757,  757,  757,  757,  758,  758,    0,    0,
        0,  758,  758,  758,  758,  759,    0,    0,    0,  759,
      759,  759,  759,  759,  760,  760,    0,    0,    0,  760,
      760,  760,  760,  761,  761,    0,    0,    0,  761,  761,
      761,  761,  762,  762,    0,    0,    0,  762,  762,  762,
      762,  736,  736,  736,  736,  736,  736,  736,  736,  736,

      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#define INITIAL 0
#line 10 "lexer.l"
import "ecdefs"
#define YYLTYPE Location
#define YY_NEVER_INTERACTIVE 1    // Avoid calling isatty on eC File object
#include "grammar.h"

bool echoOn = true;
public void SetEchoOn(bool b) { echoOn = b; }

extern YYLTYPE type_yylloc;
extern YYLTYPE expression_yylloc;

extern File fileInput;
int preprocessor();
int comment();

void TESTTTT()
{
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   type_yylloc.end.charPos += yyleng;
   type_yylloc.end.pos += yyleng;
   expression_yylloc.end.charPos += yyleng;
   expression_yylloc.end.pos += yyleng;
}

#define YY_USER_ACTION  \
   TESTTTT();

   /*
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   */

#define YY_INPUT(buf,result,max_size) \
   result = fileInput.Read(buf, 1, max_size) \

YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
File fileStack[MAX_INCLUDE_DEPTH];
char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
public void SetSomeSourceFileStack(char * fileName, int index) { strcpy(sourceFileStack[index], fileName); }
YYLTYPE locStack[MAX_INCLUDE_DEPTH];
AccessMode declModeStack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

#define uint _uint
default:

#line 1249 "lexer.ec"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 59 "lexer.l"



   yylloc.start = yylloc.end; 
   type_yylloc.start = type_yylloc.end; 
   expression_yylloc.start = expression_yylloc.end; 


#line 1409 "lexer.ec"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 737 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2592 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 67 "lexer.l"
{ preprocessor(); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 68 "lexer.l"
{ comment(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 69 "lexer.l"
{ commentCPP(); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 71 "lexer.l"
{ return(AUTO); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 72 "lexer.l"
{ return(BREAK); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 73 "lexer.l"
{ return(CASE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 74 "lexer.l"
{ return(CHAR); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 75 "lexer.l"
{ return(CONST); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 76 "lexer.l"
{ return(CONTINUE); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 77 "lexer.l"
{ return(DEFAULT); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 78 "lexer.l"
{ return(DO); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 79 "lexer.l"
{ return(DOUBLE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 80 "lexer.l"
{ return(ELSE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 81 "lexer.l"
{ return(ENUM); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 82 "lexer.l"
{ return(EXTERN); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 83 "lexer.l"
{ return(FLOAT); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 84 "lexer.l"
{ return(FOR); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 85 "lexer.l"
{ return(GOTO); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 86 "lexer.l"
{ return(IF); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 87 "lexer.l"
{ return(INT); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 88 "lexer.l"
{ return(UINT); }
	YY_BREAK
/* "uint16"            { return(UINT16); } */
/* "uint32"            { return(UINT32); } */
/* "bool"              { return(BOOL_TOKEN); } */
case 22:
YY_RULE_SETUP
#line 92 "lexer.l"
{ return(LONG); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 93 "lexer.l"
{ return(REGISTER); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 94 "lexer.l"
{ return(RETURN); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 95 "lexer.l"
{ return(SHORT); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 96 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 97 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 98 "lexer.l"
{ return(SIZEOF); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 99 "lexer.l"
{ return(STATIC); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 100 "lexer.l"
{ return(STRUCT); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 101 "lexer.l"
{ return(SWITCH); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 102 "lexer.l"
{ return(TYPEDEF); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 103 "lexer.l"
{ return(UNION); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 104 "lexer.l"
{ return(UNSIGNED); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 105 "lexer.l"
{ return(VOID); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 106 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 107 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 108 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 109 "lexer.l"
{ return(WHILE); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 111 "lexer.l"
{ return(PROPERTY); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 112 "lexer.l"
{ return(SETPROP); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 113 "lexer.l"
{ return(GETPROP); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 114 "lexer.l"
{ return(ISPROPSET); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 115 "lexer.l"
{ return(CLASS); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 116 "lexer.l"
{ return(THISCLASS); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 117 "lexer.l"
{ return(VIRTUAL); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 118 "lexer.l"
{ return(DELETE); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 119 "lexer.l"
{ return(NEWOP); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 120 "lexer.l"
{ return(NEW0OP); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 121 "lexer.l"
{ return(RENEW); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 122 "lexer.l"
{ return(RENEW0); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 123 "lexer.l"
{ return(IMPORT); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 124 "lexer.l"
{ return(DEFINE); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 125 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 126 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 127 "lexer.l"
{ return(VALIST); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 128 "lexer.l"
{ return(VAARG); }
	YY_BREAK
/* "__attribute__".?"(("({D}|{L})*"))" { return(EXT_ATTRIB); } */
/* DID I MEAN? "__attribute__"" "*"(("" "*({D}|{L})*" "*("("({D}|{L})*(" "*","" "*({D}|{L})*)*" "*")")?" "*"))" { return(EXT_ATTRIB); } */
case 58:
YY_RULE_SETUP
#line 134 "lexer.l"
{ return(EXT_ATTRIB); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 135 "lexer.l"
{ return(EXT_ATTRIB); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 136 "lexer.l"
{ return(EXT_ATTRIB); }
	YY_BREAK
/* "__attribute__".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); } */
/* "__attribute".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); }*/
case 61:
YY_RULE_SETUP
#line 141 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 142 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 143 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 144 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 145 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 146 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 147 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 148 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 149 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 150 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 151 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 152 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 153 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 154 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 155 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 156 "lexer.l"
{ return(PUBLIC); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 157 "lexer.l"
{ return(PRIVATE); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 158 "lexer.l"
{ return(TYPED_OBJECT); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 159 "lexer.l"
{ return(ANY_OBJECT); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 160 "lexer.l"
{ return(_INCREF); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 161 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 162 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 163 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 164 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 165 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 166 "lexer.l"
{ return(TYPEOF); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 167 "lexer.l"
{ return(WATCH); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 168 "lexer.l"
{ return(STOPWATCHING); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 169 "lexer.l"
{ return(FIREWATCHERS); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 170 "lexer.l"
{ return(WATCHABLE); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 171 "lexer.l"
{ return(CLASS_DESIGNER); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 172 "lexer.l"
{ return(CLASS_NO_EXPANSION); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 173 "lexer.l"
{ return(CLASS_FIXED); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 174 "lexer.l"
{ return(CLASS_DEFAULT_PROPERTY); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 175 "lexer.l"
{ return(PROPERTY_CATEGORY); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 176 "lexer.l"
{ return(CLASS_DATA); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 177 "lexer.l"
{ return(CLASS_PROPERTY); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 178 "lexer.l"
{ return(SUBCLASS); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 179 "lexer.l"
{ return(NAMESPACE); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 180 "lexer.l"
{ return(DBTABLE); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 181 "lexer.l"
{ return(DBFIELD); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 182 "lexer.l"
{ return(DBINDEX); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 183 "lexer.l"
{ return(DATABASE_OPEN); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 185 "lexer.l"
{ return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); }  // ("::"|(({IDENT}"::")*)){IDENT}  { return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 187 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 188 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 189 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 190 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 192 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 193 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 194 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 196 "lexer.l"
{ return(STRING_LITERAL); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 198 "lexer.l"
{ return(ELLIPSIS); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 199 "lexer.l"
{ return(RIGHT_ASSIGN); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 200 "lexer.l"
{ return(LEFT_ASSIGN); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 201 "lexer.l"
{ return(ADD_ASSIGN); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 202 "lexer.l"
{ return(SUB_ASSIGN); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 203 "lexer.l"
{ return(MUL_ASSIGN); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 204 "lexer.l"
{ return(DIV_ASSIGN); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 205 "lexer.l"
{ return(MOD_ASSIGN); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 206 "lexer.l"
{ return(AND_ASSIGN); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 207 "lexer.l"
{ return(XOR_ASSIGN); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 208 "lexer.l"
{ return(OR_ASSIGN); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 209 "lexer.l"
{ return(RIGHT_OP); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 210 "lexer.l"
{ return(LEFT_OP); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 211 "lexer.l"
{ return(INC_OP); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 212 "lexer.l"
{ return(DEC_OP); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 213 "lexer.l"
{ return(PTR_OP); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 214 "lexer.l"
{ return(AND_OP); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 215 "lexer.l"
{ return(OR_OP); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 216 "lexer.l"
{ return(LE_OP); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 217 "lexer.l"
{ return(GE_OP); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 218 "lexer.l"
{ return(EQ_OP); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 219 "lexer.l"
{ return(NE_OP); }
	YY_BREAK
/* "::"        { return(CLASS_OP); } */
case 135:
YY_RULE_SETUP
#line 221 "lexer.l"
{ return(';'); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 222 "lexer.l"
{ return('{'); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 223 "lexer.l"
{ return('}'); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 224 "lexer.l"
{ return(','); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 225 "lexer.l"
{ return(':'); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 226 "lexer.l"
{ return('='); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 227 "lexer.l"
{ return('('); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 228 "lexer.l"
{ return(')'); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 229 "lexer.l"
{ return('['); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 230 "lexer.l"
{ return(']'); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 231 "lexer.l"
{ return('.'); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 232 "lexer.l"
{ return('&'); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 233 "lexer.l"
{ return('!'); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 234 "lexer.l"
{ return('~'); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 235 "lexer.l"
{ return('-'); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 236 "lexer.l"
{ return('+'); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 237 "lexer.l"
{ return('*'); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 238 "lexer.l"
{ return('/'); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 239 "lexer.l"
{ return('%'); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 240 "lexer.l"
{ return('<'); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 241 "lexer.l"
{ return('>'); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 242 "lexer.l"
{ return('^'); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 243 "lexer.l"
{ return('|'); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 244 "lexer.l"
{ return('?'); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 245 "lexer.l"
{ return('$'); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 247 "lexer.l"
{
      if ( --include_stack_ptr < 0 )
      {
         yyterminate();
      }
      else
      {
         delete fileInput;
         yy_delete_buffer( YY_CURRENT_BUFFER );
         fileInput = fileStack[include_stack_ptr];
         yylloc = locStack[include_stack_ptr];
         type_yylloc = locStack[include_stack_ptr];
         expression_yylloc = locStack[include_stack_ptr];
         yy_switch_to_buffer(include_stack[include_stack_ptr] );
         defaultDeclMode = declMode = declModeStack[include_stack_ptr];
      }
   }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 266 "lexer.l"
{ yylloc.start = yylloc.end; type_yylloc.start = type_yylloc.end; expression_yylloc.start = expression_yylloc.end;}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 267 "lexer.l"
{ 
   yylloc.end.charPos = 1; yylloc.end.line += yyleng; yylloc.start = yylloc.end; 
   type_yylloc.end.charPos = 1; type_yylloc.end.line += yyleng; type_yylloc.start = type_yylloc.end; 
   expression_yylloc.end.charPos = 1; expression_yylloc.end.line += yyleng; expression_yylloc.start = expression_yylloc.end; 
   }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 272 "lexer.l"
{ 
   yylloc.start.charPos++ /*= 3 - (yylloc.start.col % 3)*/; yylloc.end.charPos = yylloc.start.charPos; yylloc.start.pos = yylloc.end.pos; 
   expression_yylloc.start.charPos++ /*= 3 - (expression_yylloc.start.col % 3)*/; expression_yylloc.end.charPos = expression_yylloc.start.charPos; expression_yylloc.start.pos = expression_yylloc.end.pos; 
   type_yylloc.start.charPos++ /*= 3 - (type_yylloc.start.col % 3)*/; type_yylloc.end.charPos = type_yylloc.start.charPos; type_yylloc.start.pos = type_yylloc.end.pos; 
   }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 278 "lexer.l"
{ yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 280 "lexer.l"
ECHO;
	YY_BREAK
#line 2348 "lexer.ec"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 737 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 737 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 736);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 280 "lexer.l"


yywrap()
{
   return(1);
}

int comment()
{
   int c, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      if(c == '/' && last == '*')
         break;
      last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int commentCPP()
{
   int c, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         break;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int preprocessor()
{
   int c, last = 0;
   int count = 0;
   char line[1024];

   line[0] = '\0';

   for(;;)
   {
      c = input();
      if(c == EOF) break;

      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         if(last != '\\')
         {
            char * pointer = line + 1;
            int lineNumber;
            line[count] = 0;
            lineNumber = GetValue(&pointer);
            if(lineNumber)
            {
               char fileName[MAX_LOCATION];
               
               int inOut;
               GetString(&pointer, fileName, MAX_LOCATION);
               inOut = GetValue(&pointer);
                              
               if(inOut == 1)
               {
                  char extension[MAX_EXTENSION];

                  defaultDeclMode = declModeStack[include_stack_ptr] = declMode;

                  GetExtension(fileName, extension);
                  if(!strcmp(extension, "c") || !strcmp(extension, "h"))
                     declMode = defaultDeclMode = defaultAccess;

                  include_stack_ptr++;
               }
               else if(inOut == 2)
               {
                  include_stack_ptr--;
                  defaultDeclMode = declMode = declModeStack[include_stack_ptr];
               }

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               //yylloc.end.pos -= count;
               yylloc.end.included = (include_stack_ptr > 0) ? GetIncludeFileID(fileName) : 0;
            }
            /*
            int lineNumber = strtol(line+1, &endPtr, 0);
            if(lineNumber)
            {
               GetString(&
               endPtr

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               yylloc.end.pos -= count;
            }
            */
            break;
         }
         count = 0;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
         line[count++] = c;
      }
      else
      {
         yylloc.end.pos++;
         if(c != '\r')
         {
            yylloc.end.charPos++;
            line[count++] = c;
         }
      }
      last = c;
   }   
   yylloc.start = yylloc.end;
   line[count] = 0;

   TrimLSpaces(line, line);
   for(c = 0; line[c] && line[c] != ' '; c++);
   if(!strncmp(line, "include", c))
   {
      char includeFile[MAX_LOCATION] = "";

      memmove(line, line+c, strlen(line+c)+1);
      TrimLSpaces(line, line);
      if(line[0] == '\"')
      {
         for(c = 1; line[c]; c++)
         {
            if(line[c] == '\"')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
         }
      }
      else if(line[0] == '<')
      {
         for(c = 1; line[c]; c++)
            if(line[c] == '>')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
      }

      if ( include_stack_ptr >= MAX_INCLUDE_DEPTH )
      {
         fprintf( stderr, $"Includes nested too deeply" );
         exit( 1 );
      }

      if(inCompiler || !FindIncludeFileID(includeFile))
      {
         File file = OpenIncludeFile(includeFile);
         if(file)
         {
            char extension[MAX_EXTENSION];

            fileStack[include_stack_ptr] = fileInput;
            locStack[include_stack_ptr] = yylloc;
            defaultDeclMode = declModeStack[include_stack_ptr] = declMode;
            include_stack[include_stack_ptr++] = YY_CURRENT_BUFFER;

            yylloc.start.charPos = yylloc.end.charPos = 1;
            yylloc.start.line = yylloc.end.line = 1;
            yylloc.start.pos = yylloc.end.pos = 0;
            yylloc.start.included = yylloc.end.included = GetIncludeFileID(includeFile);

            GetExtension(includeFile, extension);
            if(!strcmp(extension, "c") || !strcmp(extension, "h"))
               declMode = defaultDeclMode = defaultAccess;

            fileInput = file;
            yy_switch_to_buffer( yy_create_buffer( fileInput, YY_BUF_SIZE ) );
            BEGIN(INITIAL);
         }
         else
            printf("");
      }
   }
   return 0;
}

public void resetScanner()
{
   YY_FLUSH_BUFFER;
   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = false;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = false;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = false;

   include_stack_ptr = 0;
}

void resetScannerPos(CodePosition pos)
{
   YY_FLUSH_BUFFER;
   yylloc.start = yylloc.end = pos;
   type_yylloc.start = type_yylloc.end = pos;
   expression_yylloc.start = expression_yylloc.end = pos;
}
